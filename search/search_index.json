{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DependAssist","text":""},{"location":"#revolutionizing-dependency-management","title":"Revolutionizing Dependency Management","text":"<p>DependAssist is your ultimate solution to streamline the process of handling vulnerabilities in dependencies. DependAssist automates the creation and management of JIRA tickets based on Dependabot alerts from GitHub repositories, saving you time and ensuring your projects remain secure.</p>"},{"location":"#why-dependassist","title":"Why DependAssist?","text":""},{"location":"#combat-supply-chain-vulnerabilities","title":"Combat Supply Chain Vulnerabilities","text":"<p>Supply chain vulnerabilities pose a significant risk to organizations. DependAssist helps mitigate this risk by ensuring that all vulnerabilities in your dependencies are promptly identified and addressed. By automating the ticket creation process, you can stay ahead of potential threats and maintain a robust security posture.</p>"},{"location":"#save-valuable-time","title":"Save Valuable Time","text":"<p>Manually creating and managing JIRA tickets for each vulnerability is time-consuming and error-prone. DependAssist automates this process, allowing your team to focus on more critical tasks. With DependAssist, you can:</p> <ul> <li>Automatically create JIRA tickets for each Dependabot alert.</li> <li>Assign tickets to the appropriate teams.</li> <li>Transition tickets through your defined workflow.</li> <li>Avoid duplicate tickets by checking existing ones.</li> </ul>"},{"location":"#enhance-team-collaboration","title":"Enhance Team Collaboration","text":"<p>DependAssist integrates seamlessly with your existing JIRA workflows, ensuring that every vulnerability is tracked and managed efficiently. By assigning tickets to the right teams and moving them through the appropriate workflow states, DependAssist enhances collaboration and accountability within your organization.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automated JIRA Ticket Creation: DependAssist automatically creates JIRA tickets for each Dependabot alert, reducing manual effort.</li> <li>Duplicate Check: The script checks for existing tickets to avoid duplicates, ensuring a clean and organized ticketing system.</li> <li>Workflow Integration: Tickets are moved through predefined workflow states, keeping your process streamlined and consistent.</li> <li>Custom Field Support: Easily add and manage custom fields to suit your organization's needs.</li> <li>Automatic Severity Assignment: Calculate and assign severity based on CVSS score, EPSS score, and KEV status.</li> <li>Team Mapping: Automatically assign tickets to the appropriate teams based on repository mapping.</li> <li>Dismissal of Alerts: Optionally dismiss alerts in GitHub once they have been processed.</li> </ul>"},{"location":"#potential-benefits","title":"Potential Benefits","text":"<ul> <li>Increased Efficiency: By automating the ticket creation process, DependAssist saves significant time and effort.</li> <li>Improved Security: Ensures that all vulnerabilities are promptly identified and addressed, enhancing your overall security posture.</li> <li>Enhanced Collaboration: Streamlines the process of assigning and managing vulnerabilities, fostering better teamwork and accountability.</li> <li>Scalability: Suitable for organizations of all sizes, DependAssist can handle multiple repositories and large numbers of alerts with ease.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to take control of your dependency management? Head over to the Installation Guide to get started. Explore the Configuration section to tailor DependAssist to your organization's needs.</p> <p>DependAssist is here to transform the way you manage vulnerabilities, ensuring that your projects remain secure and your team stays productive. Let's secure your dependencies, one ticket at a time!</p>"},{"location":"Advanced_configuration/","title":"Advanced Configuration","text":""},{"location":"Advanced_configuration/#advanced-configuration","title":"Advanced Configuration","text":"<p>This document provides detailed descriptions for each key in the <code>Advanced.json</code> configuration file used by DependAssist, along with explanations of what happens when certain flags are set to true or false.</p>"},{"location":"Advanced_configuration/#configuration-keys","title":"Configuration Keys","text":""},{"location":"Advanced_configuration/#github","title":"<code>github</code>","text":"<ul> <li>org_name: <ul> <li>Description: The name of your GitHub organization.</li> <li>Example: <code>\"org_name\": \"your_github_org\"</code></li> </ul> </li> </ul>"},{"location":"Advanced_configuration/#settings","title":"<code>settings</code>","text":"<ul> <li>repo_file:<ul> <li>Description: The name of the file that contains the list of repositories to be processed.</li> <li>Example: <code>\"repo_file\": \"repos.txt\"</code></li> </ul> </li> <li>cutoff_days:<ul> <li>Description: The number of days to look back for Dependabot alerts. If you are running DependAssist for the first time and want to create jira tickets for all previous alerts keep cutoff_days as per your alerts age.</li> <li>Example: <code>\"cutoff_days\": 65</code></li> </ul> </li> </ul>"},{"location":"Advanced_configuration/#jira","title":"<code>jira</code>","text":"<ul> <li>server:<ul> <li>Description: The URL of your JIRA server.</li> <li>Example: <code>\"server\": \"https://yourdomain.atlassian.net\"</code></li> </ul> </li> <li>project_key:<ul> <li>Description: The key of the JIRA project where the tickets will be created. Check Basic_configuration for how to find the project keys.</li> <li>Example: <code>\"project_key\": \"SECURITY\"</code></li> </ul> </li> <li>issuetype:<ul> <li>Description: The type of issue to be created in JIRA. Check Basic_configuration for how to find the project keys.</li> <li>Example: <code>\"issuetype\": \"Bug\"</code></li> </ul> </li> <li>status_values:<ul> <li>Description: A list of status values used to filter JIRA issues. This key is crucial for preventing the creation of duplicate tickets by DependAssist. It ensures that the script can search for existing tickets before creating new ones. Note that a single package can have multiple Dependabot alerts, so using the correct status values helps in managing these alerts effectively.</li> <li>Example: <code>\"status_values\": [\"In Progress\", \"Open\", \"Pending Review\"]</code></li> <li>Note: Ensure that these status values match the workflow statuses used in your JIRA project to avoid duplication and maintain consistency. DependAssist will search for previously created issues in mentioned workflow status_values.   </li> </ul> </li> <li>process_jira_tickets:<ul> <li>Description: A boolean flag indicating whether JIRA tickets should be processed after creation. When set to true, DependAssist can add comments, transition the ticket to the next workflow step, and link it to another specified ticket.</li> <li>Example: <code>\"process_jira_tickets\": true</code></li> <li>Behavior:<ul> <li>true: The script will move the JIRA tickets through the defined workflow states after creation.</li> <li>false: The script will create the tickets but will not perform any transitions.</li> </ul> </li> </ul> </li> <li> <p>Workflow States:</p> <ul> <li> <p>normal:</p> <ul> <li>Purpose: Used for runtime dependency tickets.</li> <li>Lifecycle: The ticket will transition through the specified states in order. Please view the screenshot below</li> <li>Example:  <pre><code>\"normal\": [\"Open\", \"Handover\"]\n</code></pre></li> <li> <p>Explanation: </p> <ul> <li>Open: The initial state when a ticket is created.</li> <li>Handover: The ticket is handed over to the relevant team or individual for further action.</li> </ul> <p></p> </li> </ul> </li> <li> <p>dev_dependency:</p> <ul> <li>Purpose: Used for development dependency tickets. Since development dependencies are not used in production the risk is very low. There is no need of fixing these alerts. DependAssist will automatically dismiss dependabot alert from Github after jira ticket creation.</li> <li>Lifecycle: The ticket will transition through the specified states in order.</li> <li>Example:  <pre><code>\"dev_dependency\": [\"Open\", \"Handover\", \"Not fixed\"]\n</code></pre></li> <li> <p>Explanation:</p> <ul> <li>Open: The initial state when a ticket is created.</li> <li>Handover: The ticket is handed over to the relevant team or individual for further action.</li> <li>Not fixed: The ticket is marked as not fixed, indicating that no action is required because it\u2019s a development dependency.</li> </ul> <p></p> </li> </ul> </li> <li> <p>risk_accepted:</p> <ul> <li>Purpose: Used for tickets where the risk is accepted.</li> <li>Lifecycle: The ticket will transition through the specified states in order.</li> <li>Example: <pre><code>\"risk_accepted\": [\"Open\", \"Handover\", \"Review\", \"Accept\"]\n</code></pre></li> <li> <p>Explanation:</p> <ul> <li>Open: The initial state when a ticket is created.</li> <li>Handover: The ticket is handed over to the relevant team or individual for review.</li> <li>Review: The ticket is reviewed for risk assessment.</li> <li>Accept: The risk is accepted, and the ticket is marked as \"Risk Accepted\".</li> </ul> <p></p> </li> </ul> </li> <li> <p>Important Notes:</p> <ul> <li>Order Matters: Ensure that the states are listed in the correct order as they represent the step-by-step progression of the ticket.</li> <li>Matching JIRA Workflow: The specified states must match the actual workflow statuses in your JIRA project. This is crucial for DependAssist to transition tickets correctly.</li> </ul> <p>By defining the workflow states in the correct order, DependAssist can effectively manage the lifecycle of each ticket type, ensuring that each ticket follows the appropriate path from creation to resolution.</p> </li> </ul> </li> <li> <p>link_issue:</p> <ul> <li>Description: A boolean flag to indicate whether issues should be linked. This is important when you have different ticket that keeps track of all Risk Accepted tickets.</li> <li>Example: <code>\"link_issue\": false</code></li> <li>Behavior:<ul> <li>true: The script will link newly created issues to an existing parent issue specified by <code>outward_issue_key</code>. This only happens when ticket is marked as Risk Accepted.</li> <li>false: No issue linking will be performed.</li> </ul> </li> <li> <p>outward_issue_key:</p> <ul> <li>Description: The key of the issue to which new issues should be linked. Even if the issue is on different project board it will work.</li> <li>Example: <code>\"outward_issue_key\": \"GTMS-23\"</code></li> </ul> <p></p> </li> <li> <p>link_type:</p> <ul> <li>Description: The type of link to be created between issues.</li> <li>Example: <code>\"link_type\": \"Relates\"</code></li> <li>Reference: You can find the value sutiable for you on \"https://yourdomain.atlassian.net/rest/api/3/issueLinkType\" </li> </ul> </li> </ul> </li> <li> <p>dismiss_no_patch:</p> <ul> <li>Description: A boolean flag to indicate whether alerts with no available patches should be dismissed from GitHub.</li> <li>Example: <code>\"dismiss_no_patch\": true</code></li> <li> <p>Behavior:</p> <ul> <li>true: Alerts for which no patch is available will be automatically dismissed.</li> <li>false: Alerts for which no patch is available will remain open.</li> </ul> <p></p> </li> </ul> </li> <li> <p>custom_fields:</p> <ul> <li>Description: Custom fields to be included in JIRA tickets. Each custom field should have an ID. This is one of the most important configuration if your JIRA admin have created additional fields for jira tickets. These fields may include severity, teams, service, OWASP Category, Found by Team etc. These customfields usually will contain static values. For example OWASP category will always remain \"Vulnerable and Outdated Components\" for dependabot alerts.</li> <li> <p>Example:   <pre><code>\"custom_fields\": {\n  \"customfield_10036\": { \"id\": \"10029\" },\n  \"customfield_10037\": { \"id\": [\"10030\", \"10031\"] }\n}\n</code></pre> </p> <p>If properly configure, these customfields can be set automatically with DependAssist. Please see the example above.</p> </li> <li> <p>Reference: All customfields values are accessible via https://yourdomain.atlassian.net/rest/api/2/issue/SECURITY-6/editmeta</p> </li> </ul> </li> <li> <p>auto_severity:</p> <ul> <li>Description: A boolean flag to indicate whether automatic severity assignment should be used.</li> <li>Example: <code>\"auto_severity\": false</code></li> <li>Behavior:<ul> <li>true: The script will calculate the severity of the issue based on CVSS score, EPSS score, and KEV status, and assign the appropriate value to the custom severity field.</li> <li>false: The script will use the hardcoded severity value provided in <code>custom_fields</code>.</li> </ul> </li> </ul> </li> <li> <p>team_field_id:</p> <ul> <li>Description: The custom field ID for assigning teams in JIRA. User has to give correct IDs for each teams in team_mappings.</li> <li>Example: <code>\"team_field_id\": \"customfield_10038\"</code></li> </ul> </li> <li>team_mapping_file:<ul> <li>Description: The path to the JSON file that contains the mapping of GitHub repositories to team IDs. For example, if you have a github repository \"Thor\" and the team which owns this repository is \"Marvel\" then find the ID which points to the marvel value in jira.</li> <li>Example: <code>\"team_mapping_file\": \"team_mapping.json\"</code></li> <li>Reference: You can visit any open ticket from your jira session to get all information related to customfields. Every value for each customfield has its own ID. https://yourdomain.atlassian.net/rest/api/2/issue/SECURITY-6/editmeta</li> </ul> </li> <li>team_mapping.json:<ul> <li>Description: This file contains the mapping of GitHub repositories to team IDs. The team IDs should match the custom field ID provided in <code>team_field_id</code>. This allows the script to dynamically assign the correct team based on the repository.</li> <li>Example:   <pre><code>{\n  \"Thor\": \"10050\",\n  \"repo2\": [\"10051\", \"10052\"],\n  \"repo3\": \"10053\",\n  \"repo4\": [\"10054\", \"10055\"]\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"Advanced_configuration/#example-configuration-file","title":"Example Configuration File","text":"<pre><code>{\n  \"github\": {\n    \"org_name\": \"unstabl3\"\n  },\n  \"settings\": {\n    \"repo_file\": \"repos.txt\",\n    \"cutoff_days\": 65\n  },\n  \"jira\": {\n    \"server\": \"https://yourdomain.atlassian.net\",\n    \"project_key\": \"SECURITY\",\n    \"issuetype\": \"Bug\",\n    \"status_values\": [\"In Progress\", \"Open\", \"Pending Review\"],\n    \"process_jira_tickets\": true,\n    \"workflow_states\": {\n      \"normal\": [\"Open\", \"Handover\"],\n      \"dev_dependency\": [\"Open\", \"Handover\", \"Not fixed\"],\n      \"risk_accepted\": [\"Open\", \"Handover\", \"Review\", \"Accept\"]\n    },\n    \"link_issue\": false,\n    \"outward_issue_key\": \"GTMS-23\",\n    \"link_type\": \"Relates\",\n    \"dismiss_no_patch\": true,\n    \"custom_fields\": {\n      \"customfield_10036\": { \"id\": \"10029\" },\n      \"customfield_10037\": { \"id\": [\"10030\", \"10031\"] }\n    },\n    \"auto_severity\": false,\n    \"severity_fields\": {\n      \"customfield_10036\": {\n        \"values\": {\n          \"P4\": \"10029\",\n          \"P3\": \"10028\",\n          \"P2\": \"10027\",\n          \"P1\": \"10026\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"Basic_configuration/","title":"Basic Configuration","text":""},{"location":"Basic_configuration/#basic-configuration","title":"Basic Configuration","text":"<p>The basic configuration provided with this GitHub repository is responsible for creating tickets in JIRA with the minimum JIRA requirements. When creating JIRA tickets, the following fields are typically required:</p> <ul> <li>Summary</li> <li>Project Key</li> <li>Description</li> <li>Issue Type</li> </ul> <p>These fields are automatically fetched from the configuration file and from GitHub. Make sure to read Sensitive Tokens page to configure credentials.</p>"},{"location":"Basic_configuration/#required-fields","title":"Required Fields","text":""},{"location":"Basic_configuration/#summary","title":"Summary","text":"<p>DependAssist generates a summary for JIRA tickets using a predefined format for clarity and brevity: <pre><code>Vulnerable Library - [repository-name] - [vulnerable package name]\n</code></pre></p>"},{"location":"Basic_configuration/#project-key","title":"Project Key","text":"<p>The Project Key refers to the board where the issue will be created. You can find the Project Key by visiting the following URL in your JIRA web UI: <pre><code>https://yourdomain.atlassian.net/jira/projects\n</code></pre></p> <p></p>"},{"location":"Basic_configuration/#issue-type","title":"Issue Type","text":"<p>Common issue types for creating vulnerability tickets are \"Security Bug\" or \"Bug\". The specific issue type can be found and configured in your JIRA settings.</p> <p></p>"},{"location":"Basic_configuration/#description","title":"Description","text":"<p>DependAssist creates the JIRA ticket by fetching the description of the vulnerability from GitHub. This ensures that the ticket contains all necessary details about the vulnerability.</p>"},{"location":"Basic_configuration/#configuration-file","title":"Configuration File","text":"<p>The configuration file (<code>basic.json</code>) should include the following fields to automate the ticket creation process:</p> <pre><code>{\n  \"github\": {\n    \"org_name\": \"your_github_org\"\n  },\n  \"settings\": {\n    \"repo_file\": \"repos.txt\",\n    \"cutoff_days\": 65\n  },\n  \"jira\": {\n    \"server\": \"https://yourdomain.atlassian.net\",\n    \"project_key\": \"PROJECT_KEY\",\n    \"issuetype\": \"Bug\",\n    \"status_values\": [\"In Progress\", \"Open\", \"Pending Review\"]\n  }\n}\n</code></pre> <p>By following this configuration, DependAssist will create JIRA tickets with all the required fields, ensuring a smooth integration between GitHub and JIRA.</p>"},{"location":"Creating_GitHub_API_Key/","title":"Creating GitHub API Key","text":"<p>To use the <code>DependAssist</code> script, you need a GitHub API key with the necessary permissions.</p>"},{"location":"Creating_GitHub_API_Key/#steps-to-create-github-api-key","title":"Steps to Create GitHub API Key","text":""},{"location":"Creating_GitHub_API_Key/#1-log-in-to-github","title":"1. Log in to GitHub","text":"<ul> <li>Go to GitHub and log in.</li> </ul>"},{"location":"Creating_GitHub_API_Key/#2-navigate-to-developer-settings","title":"2. Navigate to Developer Settings","text":"<ul> <li>Click on your profile picture in the top right.</li> <li>Select Settings.</li> <li>In the sidebar, click on Developer settings.</li> </ul>"},{"location":"Creating_GitHub_API_Key/#3-create-a-new-personal-access-token","title":"3. Create a New Personal Access Token","text":"<ul> <li>Click on Personal access tokens.</li> <li>Click on Tokens (classic).</li> <li>Click Generate new token.</li> <li>Give your token a descriptive name, such as <code>DependAssist</code>.</li> </ul>"},{"location":"Creating_GitHub_API_Key/#4-set-permissions","title":"4. Set Permissions","text":"<ul> <li>Select the following minimum scopes:</li> <li><code>repo</code>: Full control of private repositories.</li> <li>Click Generate token.</li> </ul>"},{"location":"Creating_GitHub_API_Key/#5-copy-and-store-the-token","title":"5. Copy and Store the Token","text":"<p>Refer to the Sensitive Tokens page for instructions on storing your API key securely using a <code>.env</code> file or environment variables.</p> <p>You can now use this API key to authenticate the DependAssist script.</p>"},{"location":"Creating_JIRA_API_Key/","title":"Creating JIRA API Key","text":"<p>To use the <code>DependAssist</code> script, you need a JIRA API key with the necessary permissions.</p>"},{"location":"Creating_JIRA_API_Key/#steps-to-create-jira-api-key","title":"Steps to Create JIRA API Key","text":""},{"location":"Creating_JIRA_API_Key/#1-log-in-to-jira","title":"1. Log in to JIRA","text":"<ul> <li>Go to your JIRA instance and log in.</li> </ul>"},{"location":"Creating_JIRA_API_Key/#2-navigate-to-api-tokens","title":"2. Navigate to API Tokens","text":"<ul> <li>Click on your avatar (profile picture) at the bottom left.</li> <li>Select Account settings.</li> <li>In the sidebar, click on Security.</li> <li>Scroll down to API token and click on Create and manage API tokens.</li> </ul>"},{"location":"Creating_JIRA_API_Key/#3-create-api-token","title":"3. Create API Token","text":"<ul> <li>Click on Create API token.</li> <li>Give your token a label, such as <code>DependAssist</code>.</li> <li>Click Create.</li> <li>Copy the generated API token and store it securely.</li> </ul>"},{"location":"Creating_JIRA_API_Key/#4-storing-the-api-key","title":"4. Storing the API Key","text":"<p>Refer to the Sensitive Tokens page for instructions on storing your API key securely using a <code>.env</code> file or environment variables.</p> <p>By following these steps, you can create and manage a JIRA API key to authenticate the <code>DependAssist</code> script effectively.</p>"},{"location":"Installation/","title":"Installation","text":"<p>The following methods can be used to install DependAssist.</p>"},{"location":"Installation/#using-github","title":"Using GitHub","text":""},{"location":"Installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/unstabl3/DependAssist.git\ncd DependAssist\n</code></pre>"},{"location":"Installation/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>It is recommended to use a virtual environment to manage dependencies.</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate   # On Windows use `venv\\Scripts\\activate`\n</code></pre>"},{"location":"Installation/#install-the-required-libraries","title":"Install the Required Libraries","text":"<p>Install the necessary dependencies using <code>requirements.txt</code>.</p> <pre><code>pip3 install -r requirements.txt\n</code></pre>"},{"location":"Installation/#notes","title":"Notes","text":"<ul> <li>Virtual Environment: Using a virtual environment ensures that the dependencies required by DependAssist do not interfere with other Python projects on your system.</li> <li>Dependencies: The <code>requirements.txt</code> file lists all the Python libraries needed for DependAssist to run properly.</li> </ul> <p>By following these steps, you can easily install and set up DependAssist on your local machine.</p>"},{"location":"Sensitive_tokens/","title":"Sensitive Tokens","text":"<p>This script requires working JIRA and GitHub API keys to function properly.</p>"},{"location":"Sensitive_tokens/#creating-api-keys","title":"Creating API Keys","text":"<p>Before storing credentials, make sure you have created the necessary API keys with the minimum required access.</p> <ul> <li>Creating JIRA API Key</li> <li>Creating GitHub API Key</li> </ul>"},{"location":"Sensitive_tokens/#storing-the-credentials","title":"Storing the Credentials","text":"<p>The script uses the <code>dotenv</code> Python library to fetch credentials stored in a <code>.env</code> file. Alternatively, you can store these credentials directly in environment variables.</p>"},{"location":"Sensitive_tokens/#using-a-env-file","title":"Using a .env File","text":"<ol> <li>Create a <code>.env</code> file in the <code>DependAssist</code> directory.</li> <li>Save the following content inside the file with your valid credentials:</li> </ol> <pre><code>JIRA_APIKEY=your_jira_api_key_here\nJIRA_USERNAME=your_jira_username_here\nGITHUB_TOKEN=your_github_token_here\n</code></pre>"},{"location":"Sensitive_tokens/#saving-credentials-in-environment-variables","title":"Saving Credentials in Environment Variables","text":"<p>You can also set the credentials directly in your environment variables. Here\u2019s how you can do it:</p>"},{"location":"Sensitive_tokens/#on-linuxmacos","title":"On Linux/macOS","text":"<p>Add the following lines to your <code>.bashrc</code>, <code>.zshrc</code>, or equivalent shell configuration file:</p> <pre><code>export JIRA_APIKEY=your_jira_api_key_here\nexport JIRA_USERNAME=your_jira_username_here\nexport GITHUB_TOKEN=your_github_token_here\n</code></pre> <p>After adding the lines, reload the shell configuration:</p> <pre><code>source ~/.bashrc   # or source ~/.zshrc\n</code></pre>"},{"location":"Sensitive_tokens/#on-windows","title":"On Windows","text":"<p>Use the following commands in Command Prompt to set environment variables:</p> <pre><code>setx JIRA_APIKEY \"your_jira_api_key_here\"\nsetx JIRA_USERNAME \"your_jira_username_here\"\nsetx GITHUB_TOKEN \"your_github_token_here\"\n</code></pre> <p>You will need to restart your Command Prompt or computer for the changes to take effect.</p> <p>By following these steps, you can securely store and access your credentials, ensuring that the <code>DependAssist</code> script can authenticate with JIRA and GitHub APIs.</p>"},{"location":"Severitycalculation/","title":"Severity Calculation","text":"<p>DependAssist uses a comprehensive severity calculation matrix to determine the priority of issues based on various factors. This page explains how the severity is calculated and what each matrix component means.</p>"},{"location":"Severitycalculation/#components-of-severity-calculation","title":"Components of Severity Calculation","text":"<p>The severity of an issue is determined based on the following components:</p> <ol> <li>CVSS Score</li> <li>EPSS Score</li> <li>KEV Status</li> </ol>"},{"location":"Severitycalculation/#1-cvss-score","title":"1. CVSS Score","text":"<p>The Common Vulnerability Scoring System (CVSS) score is a numerical representation of the severity of a vulnerability. It ranges from 0.0 to 10.0 and is categorized as follows:</p> <ul> <li>Low: 0.1 - 3.9</li> <li>Medium: 4.0 - 6.9</li> <li>High: 7.0 - 8.9</li> <li>Critical: 9.0 - 10.0</li> </ul>"},{"location":"Severitycalculation/#2-epss-score","title":"2. EPSS Score","text":"<p>The Exploit Prediction Scoring System (EPSS) score predicts the likelihood of a vulnerability being exploited. It ranges from 0.0 to 1.0, with higher values indicating a greater probability of exploitation.</p>"},{"location":"Severitycalculation/#3-kev-status","title":"3. KEV Status","text":"<p>The Known Exploited Vulnerabilities (KEV) status indicates whether a vulnerability is known to be actively exploited. It is a binary value:</p> <ul> <li>True: The vulnerability is in the KEV database.</li> <li>False: The vulnerability is not in the KEV database.</li> </ul>"},{"location":"Severitycalculation/#severity-calculation-matrix","title":"Severity Calculation Matrix","text":"<p>DependAssist uses a matrix to determine the final internal priority based on the CVSS score, EPSS score, and KEV status. The matrix is as follows:</p>"},{"location":"Severitycalculation/#matrix-details","title":"Matrix Details","text":"CVSS Severity EPSS Probability Score Is in KEV Database? Final Internal Priority Low ANY ANY P4 Medium &lt; 0.088 No P4 Medium &gt;= 0.088 No P3 Medium ANY Yes P3 High &lt; 0.088 No P4 High &gt;= 0.088 No P3 High ANY Yes P3 Critical &lt; 0.088 No P3 Critical &gt;= 0.088 No P2 Critical ANY Yes P2"},{"location":"Severitycalculation/#detailed-explanation","title":"Detailed Explanation","text":"<ol> <li> <p>Low CVSS Severity:</p> <ul> <li>Regardless of the EPSS score and KEV status, issues with a low CVSS severity are assigned a priority of P4.</li> </ul> </li> <li> <p>Medium CVSS Severity:</p> <ul> <li>If the EPSS score is less than 0.088 and the issue is not in the KEV database, it is assigned a priority of P4.</li> <li>If the EPSS score is 0.088 or above and the issue is not in the KEV database, it is assigned a priority of P3.</li> <li>If the issue is in the KEV database (regardless of EPSS score), it is assigned a priority of P3.</li> </ul> </li> <li> <p>High CVSS Severity:</p> <ul> <li>If the EPSS score is less than 0.088 and the issue is not in the KEV database, it is assigned a priority of P4.</li> <li>If the EPSS score is 0.088 or above and the issue is not in the KEV database, it is assigned a priority of P3.</li> <li>If the issue is in the KEV database (regardless of EPSS score), it is assigned a priority of P3.</li> </ul> </li> <li> <p>Critical CVSS Severity:</p> <ul> <li>If the EPSS score is less than 0.088 and the issue is not in the KEV database, it is assigned a priority of P3.</li> <li>If the EPSS score is 0.088 or above and the issue is not in the KEV database, it is assigned a priority of P2.</li> <li>If the issue is in the KEV database (regardless of EPSS score), it is assigned a priority of P2.</li> </ul> </li> </ol>"},{"location":"Severitycalculation/#special-case","title":"Special Case","text":"<ul> <li>If the CVSS score is <code>None</code>, the issue is assigned a priority of P4.</li> </ul>"},{"location":"Severitycalculation/#example-calculation","title":"Example Calculation","text":"<p>Here is an example of how the severity calculation works:</p> <ol> <li>Vulnerability A:<ul> <li>CVSS Score: 7.5 (High)</li> <li>EPSS Score: 0.95</li> <li>KEV Status: True</li> </ul> </li> </ol> <p>Calculation:      - High CVSS severity.      - EPSS score is 0.95 (&gt;= 0.088).      - KEV status is True.</p> <p>Final Priority: P3</p> <ol> <li>Vulnerability B:<ul> <li>CVSS Score: 9.8 (Critical)</li> <li>EPSS Score: 0.05</li> <li>KEV Status: False</li> </ul> </li> </ol> <p>Calculation:      - Critical CVSS severity.      - EPSS score is 0.05 (&lt; 0.088).      - KEV status is False.</p> <p>Final Priority: P3</p> <ol> <li>Vulnerability C:<ul> <li>CVSS Score: None</li> <li>EPSS Score: 0.10</li> <li>KEV Status: False</li> </ul> </li> </ol> <p>Calculation:      - CVSS score is None.</p> <p>Final Priority: P4</p> <p>By using this matrix, DependAssist ensures that vulnerabilities are prioritized accurately based on their potential impact and the likelihood of exploitation.</p>"},{"location":"credits/","title":"Credits","text":"<p>The severity calculation matrix used in DependAssist is based on the work of Goutham Madhwaraj. You can learn more about Goutham Madhwaraj and his contributions to the cybersecurity community on his LinkedIn profile.</p>"},{"location":"credits/#special-thanks","title":"Special Thanks","text":"<p>Special thanks to the Funding Societies's Product Security Team and everyone who provided feedback and suggestions.</p>"},{"location":"credits/#references","title":"References","text":"<ul> <li>GitHub API Documentation</li> <li>JIRA API Documentation</li> <li>CVSS Scoring System</li> <li>EPSS (Exploit Prediction Scoring System)</li> <li>CISA KEV (Known Exploited Vulnerabilities)</li> <li>EPSS Baseline Score</li> </ul>"},{"location":"detailedInformation/","title":"Flow and Features","text":""},{"location":"detailedInformation/#flow","title":"Flow","text":"<p>The DependAssist script automates the process of creating and managing JIRA tickets based on Dependabot alerts from GitHub repositories. This section provides a detailed description of the script flow for different test cases.</p>"},{"location":"detailedInformation/#1-load-configuration","title":"1. Load Configuration","text":"<p>The script begins by loading the configuration file (<code>my.json</code>) and the <code>.env</code> file for credentials. The <code>.env</code> file should contain your JIRA API key, JIRA username, and GitHub token.</p>"},{"location":"detailedInformation/#2-fetch-repositories","title":"2. Fetch Repositories","text":"<p>The script reads the list of repositories to be processed from the <code>repos.txt</code> file.</p>"},{"location":"detailedInformation/#3-fetch-dependabot-alerts","title":"3. Fetch Dependabot Alerts","text":"<p>For each repository listed in repos.txt, the script fetches open Dependabot alerts from the GitHub API. This step involves retrieving information about potential vulnerabilities in the dependencies used by the repository. The cutoff_days parameter is used to filter these alerts based on their creation date, ensuring that only recent alerts are considered. The cutoff_days parameter in the my.json configuration file is used to filter alerts. This parameter specifies the number of days to look back from the current date to consider alerts as recent. Only alerts created within this time frame are processed.</p>"},{"location":"detailedInformation/#4-check-for-existing-jira-tickets","title":"4. Check for Existing JIRA Tickets","text":"<p>The script checks JIRA for existing tickets to avoid creating duplicate tickets for the same alert. This is done using a JIRA Query Language (JQL) query that searches for tickets with a summary that matches the alert's summary and also checks the description for the specific Dependabot alert link. This ensures that even if multiple alerts exist for the same package, duplicate tickets are not created.</p> <p>The script parses the response from the JIRA API to check if any tickets match the alert's summary. If a matching ticket is found, it further checks the description of each issue to see if it contains the specific Dependabot alert link. By checking the description for the alert link, the script ensures that even if multiple alerts exist for the same package, a new ticket is created only if the alert link is not already present in an existing ticket's description.</p> <ul> <li>Summary Example:<ul> <li>If the summary of the alert is \"Vulnerable Library - repo1 - package1\", the JQL query will search for tickets in the \"SECURITY\" project with statuses \"In Progress\", \"Open\", or \"Pending Review\" and with summaries containing \"Vulnerable Library - repo1 - package1\". Additionally, the script will check the description of these tickets for the specific alert link.</li> </ul> </li> </ul>"},{"location":"detailedInformation/#5-create-or-update-jira-tickets","title":"5. Create or Update JIRA Tickets","text":"<p>If no existing ticket is found, the script creates a new JIRA ticket with the relevant details. It formats the description using JIRA's Wiki Markup.</p>"},{"location":"detailedInformation/#6-process-tickets","title":"6. Process Tickets","text":"<p>The script processes tickets based on their type and the configuration settings.</p> <ul> <li>Development Dependencies: <ul> <li>Handle the creation of JIRA tickets for development dependencies.</li> <li>Add a comment indicating that the vulnerable code is not used in production.</li> <li>Move the ticket through the workflow states specified for development dependencies.</li> <li>Optionally dismiss the alert in GitHub.</li> </ul> </li> <li>Risk Accepted: <ul> <li>Handle the transition for risk-accepted tickets.</li> <li>Add a comment indicating that no patch is available.</li> <li>Move the ticket through the workflow states specified for risk-accepted dependencies.</li> <li>Optionally link the ticket to an existing risk-acceptance ticket.</li> <li>Optionally dismiss the alert in GitHub.</li> </ul> </li> <li>Normal Workflow: <ul> <li>Move the ticket through the workflow states specified for runtime dependencies.</li> </ul> </li> </ul>"},{"location":"detailedInformation/#key-features","title":"Key Features","text":"<p>DependAssist offers several key features to streamline the management of Dependabot alerts and JIRA tickets.</p>"},{"location":"detailedInformation/#automatic-team-assignment","title":"Automatic Team Assignment","text":"<p>The script can automatically assign the appropriate team to each JIRA ticket based on the repository. This is done using a <code>team_mapping.json</code> file that maps repositories to JIRA team IDs.</p> <p>Example <code>team_mapping.json</code>: <pre><code>{\n  \"repo1\": \"10050\",\n  \"repo2\": [\"10051\", \"10052\"],\n  \"repo3\": \"10053\",\n  \"repo4\": [\"10054\", \"10055\"]\n}\n</code></pre></p>"},{"location":"detailedInformation/#custom-fields","title":"Custom Fields","text":"<p>The script supports custom fields in JIRA tickets. Custom field IDs and their values are defined in the <code>my.json</code> configuration file. The script dynamically determines if a field allows multiple values.</p> <p>Example Custom Fields Configuration: <pre><code>\"custom_fields\": {\n  \"customfield_10036\": \"10029\",\n  \"customfield_10037\": [\"10030\", \"10031\"]\n}\n</code></pre></p>"},{"location":"detailedInformation/#automatic-severity-assignment","title":"Automatic Severity Assignment","text":"<p>If <code>auto_severity</code> is enabled, the script calculates the severity of each issue based on CVSS score, EPSS score, and KEV status. The appropriate severity level is then assigned to the custom severity field. It is recommended to have four categories for severity otherwise script will fail. For more details on severity calculations please check Severity Calculation </p> <p>Example Severity Fields Configuration: <pre><code>\"severity_fields\": {\n  \"customfield_10036\": {\n    \"values\": {\n      \"P4\": \"10029\",\n      \"P3\": \"10028\",\n      \"P2\": \"10027\",\n      \"P1\": \"10026\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"detailedInformation/#handling-development-dependencies","title":"Handling Development Dependencies","text":"<p>The script has special handling for development dependencies, including creating tickets and adding comments to indicate that the vulnerable code is not used in production.</p>"},{"location":"detailedInformation/#dismissing-alerts","title":"Dismissing Alerts","text":"<p>The script can automatically dismiss Dependabot alerts in GitHub if configured to do so. This feature helps manage and reduce noise from alerts that do not require immediate attention.</p> <ul> <li>Configuration:<ul> <li>dismiss_no_patch: Set to <code>true</code> to automatically dismiss alerts with no available patches.</li> </ul> </li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#1-what-is-dependassist","title":"1. What is DependAssist?","text":"<p>DependAssist is a script designed to automate the creation and management of JIRA tickets based on Dependabot alerts from GitHub repositories. It helps streamline the process of handling vulnerabilities in dependencies by creating JIRA tickets and processing them according to predefined workflows.</p>"},{"location":"faq/#2-how-do-i-install-dependassist","title":"2. How do I install DependAssist?","text":"<p>You can install DependAssist by cloning the repository from GitHub and setting up the necessary dependencies. For detailed installation instructions, refer to the Installation Guide.</p>"},{"location":"faq/#3-how-do-i-configure-dependassist","title":"3. How do I configure DependAssist?","text":"<p>DependAssist uses a configuration file (<code>my.json</code>) to define various settings and behaviors. You need to provide values for keys such as GitHub organization name, JIRA server URL, project key, issue types, workflow states, custom fields, and more. Refer to the Advanced Configuration for detailed descriptions of each configuration key.</p>"},{"location":"faq/#4-how-do-i-store-sensitive-tokens-for-dependassist","title":"4. How do I store sensitive tokens for DependAssist?","text":"<p>You can store sensitive tokens (JIRA API key, JIRA username, and GitHub token) in a <code>.env</code> file or directly in environment variables. For detailed instructions on storing credentials, refer to the Sensitive Tokens guide.</p>"},{"location":"faq/#5-what-are-cutoff_days-and-how-should-i-set-it","title":"5. What are cutoff_days, and how should I set it?","text":"<p>The <code>cutoff_days</code> parameter specifies the number of days to look back for Dependabot alerts. It filters alerts based on their creation date, ensuring that only recent alerts are considered. Set this value based on your organization's security policies and the frequency of dependency updates. A typical value might be between 3 and 5 days. If you are running this first time and want to cover all older alerts then give 365 or higher days.</p>"},{"location":"faq/#6-how-does-dependassist-check-for-existing-jira-tickets","title":"6. How does DependAssist check for existing JIRA tickets?","text":"<p>DependAssist uses a JQL query to search for existing JIRA tickets with summaries matching the alert's summary. It also checks the description of the tickets for the specific Dependabot alert link to avoid creating duplicates. Refer to the Flow for detailed steps.</p>"},{"location":"faq/#7-how-does-automatic-team-assignment-work","title":"7. How does automatic team assignment work?","text":"<p>DependAssist can automatically assign the appropriate team to each JIRA ticket based on the repository. This is done using a <code>team_mapping.json</code> file that maps repositories to JIRA team IDs. For details on setting this up, refer to the Advanced Configuration.</p>"},{"location":"faq/#8-what-is-the-purpose-of-custom-fields-in-jira-tickets","title":"8. What is the purpose of custom fields in JIRA tickets?","text":"<p>Custom fields allow you to include additional information in JIRA tickets that may be required by your organization. DependAssist supports custom fields and allows you to define them in the <code>my.json</code> configuration file. Refer to the Advanced Configuration for more information.</p>"},{"location":"faq/#9-how-does-automatic-severity-assignment-work","title":"9. How does automatic severity assignment work?","text":"<p>If <code>auto_severity</code> is enabled, DependAssist calculates the severity of each issue based on CVSS score, EPSS score, and KEV status. The appropriate severity level is then assigned to the custom severity field. For more details, refer to the Severity-calculation.</p>"},{"location":"faq/#10-how-does-dependassist-handle-development-dependencies","title":"10. How does DependAssist handle development dependencies?","text":"<p>DependAssist has special handling for development dependencies, including creating tickets and adding comments to indicate that the vulnerable code is not used in production. It also moves the ticket through the specified workflow states for development dependencies.</p>"},{"location":"faq/#11-can-dependassist-dismiss-alerts-in-github","title":"11. Can DependAssist dismiss alerts in GitHub?","text":"<p>Yes, DependAssist can automatically dismiss Dependabot alerts in GitHub if configured to do so. This helps manage and reduce noise from alerts that do not require immediate attention. Set the <code>dismiss_no_patch</code> key in the <code>my.json</code> file to <code>true</code> to enable this feature.</p>"},{"location":"faq/#12-what-should-i-do-if-i-encounter-issues-with-dependassist","title":"12. What should I do if I encounter issues with DependAssist?","text":"<p>If you encounter any issues, ensure that all required fields in the <code>my.json</code> file are correctly configured and that the <code>.env</code> file contains valid credentials. For further assistance, open an issue on the GitHub repository.</p>"},{"location":"screenshots/","title":"DependAssist in Action","text":"<p>This page showcases some screenshots of DependAssist performing its tasks. These examples will give you a visual understanding of how DependAssist integrates with JIRA and GitHub to streamline dependency management.</p>"},{"location":"screenshots/#1-creating-a-jira-ticket","title":"1. Creating a JIRA Ticket","text":"<p>DependAssist will create a new JIRA ticket for a Dependabot alert like shown in the below image:</p> <p></p>"},{"location":"screenshots/#2-automatic-severity-assignment","title":"2. Automatic Severity Assignment","text":"<p>DependAssist assigning severity to a JIRA ticket based on the CVSS score, EPSS score, and KEV status:</p> <p></p>"},{"location":"screenshots/#3-dismissing-alerts-in-github","title":"3. Dismissing Alerts in GitHub","text":"<p>DependAssist dismissing processed alerts in GitHub:</p> <p></p>"},{"location":"usage/","title":"Usage","text":"<p>This guide explains how to use the DependAssist script to automate the creation and management of JIRA tickets based on Dependabot alerts from GitHub repositories.</p>"},{"location":"usage/#prerequisites","title":"Prerequisites","text":"<p>Before using the script, ensure you have completed the following:</p> <ol> <li>Configured the <code>my.json</code> file: This file contains all necessary configurations. Refer to the Advanced Configuration for details.</li> <li>Set up sensitive tokens: Store your JIRA and GitHub API tokens securely. Refer to the Sensitive Tokens guide.</li> </ol>"},{"location":"usage/#running-the-script","title":"Running the Script","text":"<p>To run the DependAssist script, follow these steps:</p>"},{"location":"usage/#step-1-create-a-env-file","title":"Step 1: Create a <code>.env</code> File","text":"<p>Create a <code>.env</code> file in the <code>DependAssist</code> directory and add your credentials:</p> <pre><code>JIRA_APIKEY=your_jira_api_key_here\nJIRA_USERNAME=your_jira_username_here\nGITHUB_TOKEN=your_github_token_here\n</code></pre>"},{"location":"usage/#step-2-create-a-repostxt-file","title":"Step 2: Create a <code>repos.txt</code> File","text":"<p>Create a <code>repos.txt</code> file in the <code>DependAssist</code> directory and list all GitHub repositories to be processed, one per line:</p> <pre><code>repo1\nrepo2\nrepo3\n</code></pre>"},{"location":"usage/#step-3-create-a-team_mappingjson-file","title":"Step 3: Create a <code>team_mapping.json</code> File","text":"<p>Create a <code>team_mapping.json</code> file in the <code>DependAssist</code> directory to map repositories to JIRA team IDs. This file supports both single and multiple team IDs:</p> <pre><code>{\n  \"repo1\": \"10050\",\n  \"repo2\": [\"10051\", \"10052\"],\n  \"repo3\": \"10053\",\n  \"repo4\": [\"10054\", \"10055\"]\n}\n</code></pre>"},{"location":"usage/#step-4-install-dependencies","title":"Step 4: Install Dependencies","text":"<p>Ensure all necessary dependencies are installed. It is recommended to use a virtual environment:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\npip install -r requirements.txt\n</code></pre>"},{"location":"usage/#step-5-run-the-script","title":"Step 5: Run the Script","text":"<p>Run the script with the appropriate configuration file:</p> <pre><code>python main.py --config my.json\n</code></pre>"},{"location":"usage/#script-flow","title":"Script Flow","text":"<ol> <li>Load Configuration: The script loads the <code>my.json</code> configuration file and the <code>.env</code> file for credentials.</li> <li>Fetch Alerts: It fetches Dependabot alerts for each repository listed in <code>repos.txt</code>.</li> <li>Check for Existing Tickets: The script checks JIRA for existing tickets to avoid duplicates.</li> <li>Create New Tickets: If no existing ticket is found, it creates a new JIRA ticket with the relevant details.</li> <li>Process Tickets: Based on the <code>process_jira_tickets</code> flag, it processes the tickets, adds comments, moves them through workflow states, and dismisses alerts if configured.</li> </ol> <p>For detailed workflow please refer to Detailed information</p>"}]}